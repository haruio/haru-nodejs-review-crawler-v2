#!/usr/bin/env node
var cluster = require('cluster');
var Logger  = require('haru-nodejs-util').Logger;
var logConfig = require('../../logConfig');
var store = require('haru-nodejs-store');
var keys = require('haru-nodejs-util').keys;

// Time Zone
process.env.TZ = 'Asia/Seoul';

// Global Config
global.config = _getConfig();

// Global Error Code
global.errorCode = require('haru-nodejs-util').errorCode;

// set logger
global.log  = new Logger( __dirname +'/../logs/debug.log', logConfig[config.namespace]);


/**
 * Set Name Space
 * Name Space [ 'ns', 'stage', 'releases' ]
 * **/
require('haru-nodejs-util').keys.setNameSpace(config.namespace);


store.connect(config.store);

// // Exception
process.on('uncaughtException', function(error) {
  log.error('[%d] uncaughtException : ', process.pid, error.stack);
});

if( cluster.isMaster ) {
  var processCount = require('os').cpus().length - 2;
  if( processCount < 1 ) {
    processCount = 1;
  }

  cluster.on('exit',function(worker) {
    log.error('[%d] worker is exit', worker.process.pid);
    cluster.fork();
  });

  for( var i = 0; i < processCount; i++ ) {
    var worker = cluster.fork();
  }

} else {
  require('../worker');
}


function _startBackgroundJob() {
  store.get('public').zrange(keys.crawlingTimeZsetKey(), 0, -1, function(error, results) {
    console.log(results);
  });
};


function _registerBackgroundJob() {

};


function _getConfig() {
  var globalConfig = require('../../config.json');
  var appName = require('../package.json').name;
  var config = globalConfig[globalConfig.namespace];

  config.port = globalConfig[appName].port;
  config.crawlerInterval = globalConfig[appName].crawlerInterval;
  config.namespace = globalConfig.namespace;
  config.sessionToken = globalConfig.sessionToken;
  config.query = globalConfig.query;

  return config;
};

